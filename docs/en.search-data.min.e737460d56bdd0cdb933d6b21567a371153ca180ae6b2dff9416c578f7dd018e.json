[{"id":0,"href":"/executor/docs/configuration/basic/","title":"Basic","section":"Configuration","content":"Configuration #  Basic #  The commands and the interval for each command can be set for each location (left, center, right) separately in the settings view. It is also possible to deactivate single commands without deleting them.\n"},{"id":1,"href":"/executor/docs/installation/","title":"Installation","section":"Docs","content":"Installation #  One click installation #   \nManual installation #  Download the file executor@raujonas.github.io from the latest release and extract the content to ~/.local/share/gnome-shell/extensions/executor@raujonas.github.io.\nYou have to restart gnome shell afterwards (Alt + F2 and then enter r).\n"},{"id":2,"href":"/executor/docs/configuration/custom-css/","title":"Use of custom css","section":"Configuration","content":"Configuration #  Use of custom css #  It is possible to use custom css to style the output of your commands dynamically. There are two ways to do this:\n  Preferred option: Create the file ~/.config/executor@raujonas.github.io/custom.css and add your custom css there. This file will be imported into the extension. This way your custom css will NOT be overwritten by extension updates. You can use the following commands to create the file:\nmkdir /home/$USER/.config/executor@raujonas.github.io touch /home/$USER/.config/executor@raujonas.github.io/custom.css   Non durable option: You can add your custom css in ~/.local/share/gnome-shell/extensions/executor@raujonas.github.io/custom.css. Your custom css will be overwritten by extension updates in this case. Make sure to save it somewhere before updating.\n  Example custom.css file:\n.red {  color: red; }  .yellow {  color: yellow }  .green {  color: rgb(107, 179, 0); }  .huge-font {  font: 20px \u0026#34;Comic Sans\u0026#34;; }  .italic {  font: 17px \u0026#34;Arial\u0026#34;;  font-style: italic; } Note: After making changes in your css you have to restart your shell (Alt + F2 and then enter r).\nUsage: To use the css classes dynamically in your commands, you can add it with the following syntax to your output: \u0026lt;executor.css.red\u0026gt;. This will add the specified css class to your output, in this case red.\nExample: The following command queries the current timestamp. If the output is a round number it should have the color red, if not then green.\ndate +%s | awk \u0026#39;{if ($1 % 2 == 0) {print $1\u0026#34;\u0026lt;executor.css.red\u0026gt;\u0026#34;} else { print $1\u0026#34;\u0026lt;executor.css.green\u0026gt;\u0026#34;} }\u0026#39; The output is either one of the following depending on the timestamp:\nYou can also combine multiple css classes:\n"},{"id":3,"href":"/executor/docs/import-export/","title":"Export and import settings","section":"Docs","content":"Export and import settings #  If you want to export and import all settings at once you can use dconf.\nExport: dconf dump /org/gnome/shell/extensions/executor/ \u0026gt; executor-settings.dconf\nImport: dconf load /org/gnome/shell/extensions/executor/ \u0026lt; executor-settings.dconf\n"},{"id":4,"href":"/executor/docs/configuration/custom-markup/","title":"Use of custom markup","section":"Configuration","content":"Configuration #  Use of markup #  Usage: To use markup there\u0026rsquo;s another setting \u0026lt;executor.markup.true\u0026gt; which has to be included somewhere in the output to activate markup.\nExample: The following command is an example for using markup with different colors and some italic text, all inside one command. You can find other attributes like font_family or size here.\necho \u0026#34;\u0026lt;executor.markup.true\u0026gt; \u0026lt;span foreground=\u0026#39;blue\u0026#39;\u0026gt;Blue text\u0026lt;/span\u0026gt; is \u0026lt;i\u0026gt;cool\u0026lt;/i\u0026gt;! \u0026lt;span foreground=\u0026#39;red\u0026#39;\u0026gt;Red text\u0026lt;/span\u0026gt; is cool too\u0026#34; This produces the following output:\nNote: Due to a bug in ClutterText there is an empty space in front of the first \u0026lt;span\u0026gt; tag required\n"},{"id":5,"href":"/executor/docs/configuration/combine-css-and-markup/","title":"Combine css and markup","section":"Configuration","content":"Configuration #  Combine css and markup #  Combination of css and markup is also possible. In this case the setting for markup \u0026lt;executor.markup.true\u0026gt; must be located after all css settings. Here is an example:\necho \u0026#34; \u0026lt;span font_family=\u0026#39;monospace\u0026#39; foreground=\u0026#39;blue\u0026#39;\u0026gt;Blue text\u0026lt;/span\u0026gt; is \u0026lt;i\u0026gt;cool\u0026lt;/i\u0026gt;! \u0026lt;span foreground=\u0026#39;red\u0026#39;\u0026gt;Red text\u0026lt;/span\u0026gt;\u0026lt;executor.css.green\u0026gt;\u0026lt;executor.markup.true\u0026gt; is cool too\u0026#34; This produces the following output:\n"},{"id":6,"href":"/executor/docs/use-cases/","title":"Use cases","section":"Docs","content":"Use cases #  Let me know what your use cases are and I will add them here.\nI for example use this extension for hardware monitoring:\n"},{"id":7,"href":"/executor/docs/debugging/","title":"Debugging","section":"Docs","content":"Debugging #  If you have no output or other issues you can have a look into the log:\njournalctl /usr/bin/gnome-shell -f "},{"id":8,"href":"/executor/docs/configuration/complex-scripts/","title":"More complex scripts","section":"Configuration","content":"Configuration #  More complex scripts #  If you want to execute more complex scripts it might be helpful to store them outside of the extension and create the final output there.\n Here is a very good example of how you can achieve this. With this solution it is also possible to create a rotating output of multiple different commands.\n"},{"id":9,"href":"/executor/docs/development/","title":"Development","section":"Docs","content":"Development #  Please feel free to contribute and suggest ideas or report bugs!\n\nCompile settings schema #  glib-compile-schemas ./schemas\nUpdate example.pot #  xgettext --from-code=UTF-8 --output=po/example.pot *.js\n"},{"id":10,"href":"/executor/docs/translations/","title":"Translations","section":"Docs","content":"Translations #  You can add translation for the language of your choice by editing the example.pot with a program like Poedit. Then you can submit your *.po and *.mo file inside the po/ folder.\n"}]